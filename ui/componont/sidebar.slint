
import { HorizontalBox, VerticalBox, Palette } from "std-widgets.slint";
component SideBarItem inherits Rectangle {
    in property <int> tab-index;
    in property <bool> selected;
    in property <bool> has-focus;
    in-out property <string> text <=> label.text;
    
    callback clicked <=> touch.clicked;
    background: #585858;
    border-radius: 10px;
    height: 40px;
    width: 90px;
    
    // padding: 40px;
    // min-height: l.preferred-height;
    accessible-role: tab;
    accessible-label: root.text;
    accessible-item-index: root.tab-index;
    accessible-item-selectable: true;
    accessible-item-selected: root.selected;
    accessible-action-default => { self.clicked(); }

    states [
        pressed when touch.pressed : {
            state.opacity: 0.8;
        }
        hover when touch.has-hover : {
            state.opacity: 0.2;
        }
        selected when root.selected : {
            state.opacity: 1;
        }
        focused when root.has-focus : {
            state.opacity: 0.5;
        }
    ]

    state := Rectangle {
        opacity: 0;
        border-radius: 10px;
        background: Palette.background;
        animate background { duration: 300ms; }
        animate opacity { duration: 300ms; }
    }
    
    l := HorizontalBox {
        y: (parent.height - self.height) / 2;
        spacing: 0px;
        
        label := Text {
            font-weight: root.selected ? 900 : 400;
            font-size: root.selected ? 20px : 16px;
            color: root.selected ? #000008 : #0a0404;
            vertical-alignment: center;
            horizontal-alignment: center;
            accessible-role: none;
            animate font-size { duration: 200ms; }
            animate color { duration: 200ms; }
        }
    }
    
    touch := TouchArea {
        width: 100%;
        height: 100%;
        
    }
}

export component SideBar inherits Rectangle {
    in property <[string]> model: ["Socket","MQTT","API"];
    out property <int> current-item: 0;
    width: 180px;
    VerticalBox {
        navigation := VerticalLayout {
            spacing: 10px;
            for item[index] in root.model : SideBarItem {
                
                SideBarItem{

                    clicked => { root.current-item = index; }
                    tab-index: index;
                    // has-focus: index == root.current-focused;
                    text: item;
                    selected: index == root.current-item;
                }
            }
        }
        Rectangle {
            height: 500px;
        }
        
        
    }
    
}
